from numba import njit, cfunc
import numpy as np
from scipy.optimize import bisect

jkw = dict(cache=True)


@cfunc('f8[:](f8, f8[:], f8[:])', **jkw)
def crtbp_ode(t, s, mc):
    """
    —Ä–∞—Å—á—ë—Ç —Å–∏—Å—Ç–µ–º—ã —É—Ä–∞–≤–Ω–µ–Ω–∏–π –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –∫—Ä—É–≥–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Ç—Ä—ë—Ö —Ç–µ–ª
    –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t, –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ s —Å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ mc
    
    –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—É—é —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    x, y, z, vx, vy, vz = s
    mu2 = mc[0]
    mu1 = 1. - mu2

    r1 = ((x + mu2)**2 + y**2 + z**2)**0.5
    r2 = ((x - mu1)**2 + y**2 + z**2)**0.5

    ax = 2*vy + x - (mu1 * (x + mu2)/r1**3 + mu2 * (x - mu1)/r2**3)
    c = (mu1 / r1**3 + mu2 / r2**3)
    ay = -2*vx + y - c * y
    az = -c * z

    return np.array([vx, vy, vz, ax, ay, az])

# –ø—É–Ω–∫—Ç 1 
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–æ–±—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –†—É–Ω–≥–µ-–ö—É—Ç—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∞–±–ª–∏—Ü—ã –ë—É—Ç—á–µ—Ä–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º –û–î–£ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞

@njit(**jkw)
def rk_step_b(f, t, s, h, A, b, c, mc):
    """
    —à–∞–≥ –æ–±–æ–±—â–µ–Ω–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –†—É–Ω–≥–µ-–ö—É—Ç—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ h
    –≤ –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ t —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º s
    —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —à–∞–≥–æ–º h –∏ —Ç–∞–±–ª–∏—Ü–µ–π –±—É—Ç—á–µ—Ä–∞ –∏–∑ A, b, c
    –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ mc
    """
    N = b.shape[0]
    k = np.empty((N, s.shape[0]))
    ds = np.zeros(s.shape[0])
    for i in range(N):
        t_step = t + h * c[i]
        s_step = np.zeros(s.shape[0])
        for j in range(i):
            s_step += A[i,j] * k[j]
        k[i, :] = f(t_step, s + h * s_step, mc)
        ds += b[i] * k[i]
    return s + h * ds


@njit(**jkw)
def rk_nsteps_b(f, t, s, h, butcherTab, mc, n):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –∫—Ä—É–≥–æ–≤–æ–π –∑–∞–¥–∞—á–∏ —Ç—Ä—ë—Ö —Ç–µ–ª –Ω–∞ n —à–∞–≥–æ–≤
    (–≤ –≤–∏–¥–µ –Ω–∞–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π arr –≤ –∫–∞–∂–¥—ã–π –∏–∑ n –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏)
    —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ f –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ t –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è s,
    —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º —à–∞–≥–æ–º h –∏ —Ç–∞–±–ª–∏—Ü–µ–π –±—É—Ç—á–µ—Ä–∞ –∏–∑ butcherTab
    –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞–º–∏ mc
    """
    A, b, c = butcherTab
    arr = np.empty((n + 1, s.shape[0] + 1))
    arr[:, 0] = t + h * np.arange(n + 1)
    arr[0, 1:] = s
    for i in range(n):
        arr[i + 1, 1:] = rk_step_b(
                                  f,           # –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –°–û–î–£
                                  arr[i, 0],   # t_0
                                  arr[i, 1:],  # s_0
                                  h,           # —à–∞–≥ dt
                                  A,b,c, #—Ç–∞–±–ª–∏—Ü–∞ –ë—É—Ç—á–µ—Ä–∞
                                  mc # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
                                  )  
    return arr

# –ø—É–Ω–∫—Ç 2
# –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (1) –¥–ª—è –¥–æ—Å—Ä–æ—á–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–π –∏–∑ –ø–ª–æ—Å–∫–æ—Å—Ç–µ–π
@njit(**jkw)
def rk_nsteps_planes_b(f, t, s, h, butcherTab, mc, n, pl):
    """
    –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è rk_nsteps_b –Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–∞—Å—á—ë—Ç–∞ (–ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –Ω–µ—ë –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫
    —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–æ–≤–Ω–æ –¥–æ –≤—ã—Ö–æ–¥–∞ –∏–∑ –Ω–µ—ë)
    """
    A, b, c = butcherTab
    arr = np.empty((n + 1, s.shape[0] + 1))
    arr[:, 0] = t + h * np.arange(n + 1)
    arr[0, 1:] = s
    
    i = 0
    for i in range(n):
        arr[i + 1, 1:] = rk_step_b(
                                  f,           # –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å –°–û–î–£
                                  arr[i, 0],   # t_0
                                  arr[i, 1:],  # s_0
                                  h,           # —à–∞–≥ dt
                                  A,b,c,
                                  mc # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
                                  ) 
        x = arr[i + 1, 1]
        if x < pl[0] or x > pl[1]:
            break

    return arr[:i + 2]


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏  ùë£ùë¶0  –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∞ –±–∏—Å–µ–∫—Ü–∏–∏ –¥–ª—è –æ—Ä–±–∏—Ç—ã,
# –∑–∞–¥–∞–Ω–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω—ã–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ–º  (ùë•0,0,ùëß0)  –∏ —É—Å–ª–æ–≤–∏–µ–º –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏
# –∏ –ø–ª–æ—Å–∫–æ—Å—Ç–∏  ùëãùëÇùëç  –≤ –Ω–∞—á–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏

@njit
def get_plane(vy, f, s, h, butcherTab, mc, n, pl):
    """
    –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–∑ –¥–≤—É—Ö –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö - –≤ —Å—Ç–æ—Ä–æ–Ω—É –±–æ–ª–µ–µ –º–∞—Å—Å–∏–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ -1
    –∏–ª–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É –º–µ–Ω–µ–µ –º–∞—Å—Å–∏–≤–Ω–æ–≥–æ 1
    –ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ vy –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ rk_nsteps_planes_b
    """
    s0 = s.copy()
    s0[4] = vy
    arr = rk_nsteps_planes_b(f, 0.,s0,h,butcherTab,mc,n, pl)
    x = arr[-1,1]
    xmean = np.mean(pl)
    return -1 if x < xmean else 1


def get_v0(v_ab, f, s_0, h, butcherTab, mc, pl):
    """
    —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–º –±–∏—Å–µ–∫—Ü–∏–∏
    –∫–∞–∫ —Ç–æ—á–∫—É —Ä–∞–∑—Ä—ã–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ get_plane —Å –æ–±–ª–∞—Å—Ç—å—é –ø–æ–∏—Å–∫–∞ v_ab
    """
    s = np.zeros(6)
    s[:3] = s_0
    v_a, v_b = v_ab
    v_star = bisect(get_plane, v_a, v_b, args=(f, s, h, butcherTab, mc, 100000, pl), xtol=1e-16)
    return v_star

# –ø—É–Ω—Ç–∫ 3
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å–∫–æ—Ä–æ—Å—Ç–µ–π –æ—Ä–±–∏—Ç, 
# –Ω–∞—á–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–¥–∞–Ω—ã –Ω–∞ —Ä–µ—à–µ—Ç–∫–µ

def get_v0_over_grid(xs, zs, vs, f, h, b_t, mc, pl):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á—ë—Ç–∞ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–æ —É–∑–ª–∞–º —Ä–µ—à—ë—Ç–∫–∏ [xs] x [zs],
    –æ—Ç–≤–µ—á–∞—é—â–∏—Ö –∑–∞ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    N = xs.shape[0]
    main_arr = np.empty((N,N))
    for i in range(N):
        for j in range(N):
            main_arr[i,j] = get_v0(vs, f, (xs[i], 0, zs[j]), h, b_t, mc, pl)
    return main_arr